<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CallstackReportCmdLineDump" xml:space="preserve">
    <value>Report callstacks line is {0} {1}</value>
    <comment>{0} is the VTune executable, {1} the command line arguments to VTune</comment>
  </data>
  <data name="CollectCmdLineDump" xml:space="preserve">
    <value>Collect command line is {0} {1}</value>
    <comment>{0} is the VTune executable, {1} the command line arguments to VTune</comment>
  </data>
  <data name="DirCreationFailed" xml:space="preserve">
    <value>Couldn't create specified directory {0}, error: {1}</value>
  </data>
  <data name="ErrorMsgCannotBuildModuleFunctionDict" xml:space="preserve">
    <value>Couldn't build the module/function dictionary</value>
  </data>
  <data name="ErrorMsgCannotFindCPUUtilizationReport" xml:space="preserve">
    <value>Cannot find specified CPU utilization report at path {0}</value>
    <comment>{0} is the path where CPU utilization report should be</comment>
  </data>
  <data name="ErrorMsgDirectoryDoesNotExist" xml:space="preserve">
    <value>Cannot find specified directory {0}</value>
    <comment>{0} is the directory path</comment>
  </data>
  <data name="ErrorMsgFileDoesNotExist" xml:space="preserve">
    <value>Specified file {0}/{1} does not exist</value>
    <comment>{0} is the directory and {1} the filename</comment>
  </data>
  <data name="ErrorMsgOSNotSupported" xml:space="preserve">
    <value>Only Linux and Windows are supported at this time</value>
  </data>
  <data name="ErrorMsgPathDoesNotExist" xml:space="preserve">
    <value>Specified path {0} does not exist</value>
    <comment>{0} is the requested path</comment>
  </data>
  <data name="ErrorMsgUnexpectedInputWhileParsing" xml:space="preserve">
    <value>Parsing exception caught: {0}</value>
    <comment>{0} is the exception message</comment>
  </data>
  <data name="ErrorMsgVTuneExpectedFileNotFound" xml:space="preserve">
    <value>Please check you have installed VTune; expected file {0} not found</value>
    <comment>{0} is the file path</comment>
  </data>
  <data name="ErrorMsgWrongTimeSpecified" xml:space="preserve">
    <value>Invalid runtime specification in CPU utilization report</value>
  </data>
  <data name="IncorrectCommandLine" xml:space="preserve">
    <value>Incorrect command line</value>
  </data>
  <data name="InstallVTuneFrom" xml:space="preserve">
    <value>Only VTune 2017 or 2018 supported, see https://software.intel.com/intel-vtune-amplifier-xe</value>
  </data>
  <data name="OutputDirRequired" xml:space="preserve">
    <value>Need an output directory unless in dry run</value>
    <comment>The user has failed to provide a directory to drop the output in (or that they want a dry run)</comment>
  </data>
  <data name="ProcessRunnerErrorWhenRunningInferior" xml:space="preserve">
    <value>Encountered error while running inferior process: {0}</value>
    <comment>{0} is the string describing the error the inferior induced</comment>
  </data>
  <data name="ProcessRunnerInferiorCancelledWithMsg" xml:space="preserve">
    <value>Operation was cancelled with message : {0}</value>
  </data>
  <data name="ProcessRunnerInferiorOutputPrefix" xml:space="preserve">
    <value>From process: {0}</value>
  </data>
  <data name="SymbolPathSpecifiedNotification" xml:space="preserve">
    <value>Symbol path has been specified</value>
  </data>
  <data name="TimingReportCmdLineDump" xml:space="preserve">
    <value>Report timing line {0} {1}</value>
    <comment>{0} is the VTune executable, {1} the command line arguments to VTune</comment>
  </data>
  <data name="VTuneFoundInPath" xml:space="preserve">
    <value>The path of VTune is : {0}</value>
  </data>
  <data name="VTuneNotFoundInExpectedPath" xml:space="preserve">
    <value>VTune not found in expected path : {0}</value>
    <comment>The program has tried the canonical location for VTune and failed to find the program</comment>
  </data>
</root>